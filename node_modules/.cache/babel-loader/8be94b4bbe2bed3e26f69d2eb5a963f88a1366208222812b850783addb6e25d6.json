{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sanna\\\\Desktop\\\\React-Files\\\\IntrestCaluclator\\\\src\\\\IntrestCaluclator.js\";\nimport IntrestForm from \"./Components/Card/IntrestForm\";\nimport ResultTable from \"./Components/ResultTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IntrestCaluclator() {\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n\n    let currentSavings = userInput.currentSavings; // feel free to change the shape of this input object!\n    const yearlyContribution = userInput.yearlyContribution; // as mentioned: feel free to change the shape...\n    const expectedReturn = userInput.expectedInterest / 100;\n    const duration = userInput.investmentDuration;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(IntrestForm, {\n      onGetData: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_c = IntrestCaluclator;\nvar _c;\n$RefreshReg$(_c, \"IntrestCaluclator\");","map":{"version":3,"names":["IntrestForm","ResultTable","jsxDEV","_jsxDEV","IntrestCaluclator","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","expectedInterest","duration","investmentDuration","i","yearlyInterest","push","year","savingsEndOfYear","children","onGetData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sanna/Desktop/React-Files/IntrestCaluclator/src/IntrestCaluclator.js"],"sourcesContent":["import IntrestForm from \"./Components/Card/IntrestForm\";\r\nimport ResultTable from \"./Components/ResultTable\";\r\n\r\nexport default function IntrestCaluclator(){\r\n\r\n    const calculateHandler = (userInput) => {\r\n        // Should be triggered when form is submitted\r\n        // You might not directly want to bind it to the submit event on the form though...\r\n        const yearlyData = []; // per-year results\r\n    \r\n        let currentSavings = userInput.currentSavings; // feel free to change the shape of this input object!\r\n        const yearlyContribution = userInput.yearlyContribution; // as mentioned: feel free to change the shape...\r\n        const expectedReturn = userInput.expectedInterest / 100;\r\n        const duration = userInput.investmentDuration;\r\n    \r\n        // The below code calculates yearly results (total savings, interest etc)\r\n        for (let i = 0; i < duration; i++) {\r\n          const yearlyInterest = currentSavings * expectedReturn;\r\n          currentSavings += yearlyInterest + yearlyContribution;\r\n          yearlyData.push({\r\n            // feel free to change the shape of the data pushed to the array!\r\n            year: i + 1,\r\n            yearlyInterest: yearlyInterest,\r\n            savingsEndOfYear: currentSavings,\r\n            yearlyContribution: yearlyContribution,\r\n          });\r\n        }\r\n    \r\n        // do something with yearlyData ...\r\n        \r\n      };\r\n    return (\r\n        <div>\r\n            <IntrestForm onGetData = {calculateHandler}/>\r\n            <ResultTable />\r\n\r\n        </div>\r\n    );\r\n}"],"mappings":";AAAA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,iBAAiBA,CAAA,EAAE;EAEvC,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACpC;IACA;IACA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAGF,SAAS,CAACE,cAAc,CAAC,CAAC;IAC/C,MAAMC,kBAAkB,GAAGH,SAAS,CAACG,kBAAkB,CAAC,CAAC;IACzD,MAAMC,cAAc,GAAGJ,SAAS,CAACK,gBAAgB,GAAG,GAAG;IACvD,MAAMC,QAAQ,GAAGN,SAAS,CAACO,kBAAkB;;IAE7C;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGP,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIO,cAAc,GAAGN,kBAAkB;MACrDF,UAAU,CAACS,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEV,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EAEF,CAAC;;EACH,oBACIN,OAAA;IAAAgB,QAAA,gBACIhB,OAAA,CAACH,WAAW;MAACoB,SAAS,EAAIf;IAAiB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC7CrB,OAAA,CAACF,WAAW;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEd,CAAC;AAEd;AAACC,EAAA,GAnCuBrB,iBAAiB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}